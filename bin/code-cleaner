#!/usr/bin/env ruby -i
# encoding: utf-8

# This is black magic!
# If you like Perl, you will probably enjoy it
# However it's easy to write and it works, so why not.

# Also be warned this script is evil â€“ it might eat your
# cat or burn you house and I'm not responsible for it.

# == Normalize your source code == #
# 1) replace tabs by two space
# 2) remove trailing whitespace
# 3) add \n at the end of file unless it's already there

# == Usage == #
# code-cleaner app/controller/application_controller.rb
# cat app/controller/application_controller.rb | code-cleaner
#
# == Implementation == #
# The point is that ruby with -i will edit files

require "find"

$-i = "" # Windows compatibility

WHITELIST = Regexp.new(ENV["WHITELIST"] || '\.(rb|rake|nake|thor|task)$')
BLACKLIST = Regexp.new(ENV["BLACKLIST"] || '/(vendor|gems)/')

def permitted?(file)
  WHITELIST.match(file) && ! BLACKLIST.match(file)
end

if ARGF.nil?
  abort "Hey mate, what about some arguments or piped data? How the fuck you think I work?!"
end

# help
if ARGV.include?("-h") or ARGV.include?("--help")
  abort "[\e[32mUsage\e[0m]\n"\
        "code-cleaner script.rb       # normalize script.rb\n"\
        "cat script.rb | code-cleaner # normalize standard input and print output to standard output\n"\
        "\n"\
        "[\e[32mOptions\e[0m]\n"\
        "--encoding=utf-8             # add encoding declaration if missing\n"\
        "--apply-rules                # apply blacklisting and whitelisting even on explicitly specified files\n"\
        "--try-apply-rules            # apply rules and exit successfuly if some files left in ARGV, fail otherwise\n"\
        "\n"\
        "[\e[32mEnvironment Variables\e[0m]\n"\
        "BLACKLIST                    # patterns which will be ignored, defaults to /(vendor|gems)/\n"\
        "WHITELIST                    # patterns which won't be ignored, defaults to \.(rb|rake|nake|thor|task)$\n"\
        "\n"\
        "[\e[32mTricks\e[0m]\n"\
        "If you want to add files from your bin or script directory into \n"\
        "whitelist, use WHITELIST='(bin/[^/]+|.+\.(rb|rake|nake|thor|task))$'"
        "\n"\
        "[\e[32mExamples\e[0m]\n"\
        "WHITELIST='(bin/[^/]+|.+\.(rb|rake|nake|thor|task))$'"
end

def apply_rules
  original = ARGV.dup
  ARGV.delete_if { |file| File.file?(file) && ! permitted?(file) }
  puts "~ Skipping #{original - ARGV}" unless ARGV == original
end

if ARGV.delete("--try-apply-rules")
  apply_rules ? exit : exit 1
end

if ARGV.delete("--apply-rules")
  apply_rules
end

unless ARGV.grep(/^--encoding=(.+)$/).empty?
  argument = ARGV.grep(/^--encoding=(.+)$/).first
  ARGV.delete(argument)
  argument.match(/^--encoding=(.+)$/)
  encoding = $1.dup
else
  encoding = nil
end

# expand all directories to list of files
if ARGV.any? { |file| File.directory?(file) }
  args = Array.new
  ARGV.each do |item|
    if File.directory?(item)
      Find.find(item) do |file|
        if File.file?(file) && permitted?(file)
          args.push(file)
        end
      end
    else
      args.push(item)
    end
  end
  ARGV.clear.push(*args)
  puts "~ Expanding args into #{ARGV.inspect}"
end

# Ruby 1.9 will warn that you can't do in place edit for stdio,
# so we will disable in place mode. Yes, in Ruby 1.9 you can finally
# turn in place mode on or off from API in better way than just $-i = false.
if ARGF.respond_to?(:inplace_mode) && ARGV.empty?
  ARGF.inplace_mode = false
end

# default exit status is 10 which signalize that we actually haven't changed anything
status = 10

# This is the only way how I was able to inspect if STDIN is empty. Magic, right?
# NOTE: if this shows as a bad idea, another way might be to put "/dev/null" resp. "NUL" on Windows to the ARGV
begin
  STDIN.read_nonblock(1)
rescue Errno::EAGAIN
  # The point of inspecting if STDIN and ARGV are empty is that we might
  # have an empty ARGF if anything passed and if so, it will wait for an interactive input which we don't want
  unless ARGV.empty?
    while line = ARGF.gets
      # I was trying to use ARGF.lineno.eql?(1), but it doesn't work. First problem
      # was it didn't work with ARGF#each_line because IO#lineno count how many times
      # IO#gets was called rather than how many \n the stream have. It isn't any
      # serious problem, however when we have multiple files in ARGV, then the
      # lineno isn't cleaned after the file in ARGF is switched.
      # The trick with line.length == ARGF.pos is simple, IO#pos returns position
      # of last character which was readed by gets or similar method, so if
      # the position is same as is the line, then it has to be the first line.
      if line.length == ARGF.pos && encoding && ! line.match(/^#.*coding/)
        puts "# encoding: #{encoding}"
      end
      # You might be wondering WTF is going on, I'm editing files, so I have to use File.open, do the modification on the original content and then save it. The point is we used -i switch which is good for in place editing
       # flag that we actually changed the file
      status = 0 if line.match(/^\s*\t\s*/) || ! line.match(/\n/)
      puts line.gsub(/\t/, "  ").rstrip
    end
  end
end

exit status
