#!/bin/sh

echo "Entering pre-commit hook ..."

# The code-cleaner script has to be in your $PATH. Uncomment
# the following line if you have code-cleaner installed locally
<% if options[:path].nil? %>#<% end %>export PATH="<%= options[:path] || "script" %>:$PATH"

# If you haven't done any commit yet,
# git diff will fail with following message:
# fatal: No HEAD commit to compare with (yet)

# TODO: how to get list of files which will be
# committed if there isn't any commit in the index yet?
# For now we just use normalize everything in current
# directory, but it isn't very good solution.
files=$(git diff --staged --name-only 2> /dev/null || echo ".")

function abort() {
  printf "[\e[31mERROR\e[0m] $*\n"
  exit 1
}

# NOTE: we are using printf rather than echo because printf should be
# more portable, each echo implementation has quite different behaviour
if which code-cleaner &> /dev/null; then
  for file in $files; do
    if test -f "$file" ; then # ignore files which was removed by git rm
      if code-cleaner "$file" --try-apply-rules &> /dev/null ; then
        printf "Normalizing \"\e[36m$file\e[0m\" "
        code-cleaner "$file" --apply-rules &> /dev/null
        # NOTE: we have to check the exit status directly,
        # so we can be sure that the command just wasn't found
        if [ $? -eq 10 ]; then # code-cleaner exits with 0 if some changes were made
          printf "[\e[32mCLEAN\e[0m]\n"
        elif [ $? -eq 1 ]; then # something goes wrong
          printf "[\e[31mERROR\e[0m]\n"
          code-cleaner "$file" --apply-rules
        elif [ $? -eq 0 ] ; then
          printf "[\e[33mDONE\e[0m]\n"
          git add "$file" # so the changes will be committed immediately
        else
          abort "Unexpected exit status $?"
        fi
      else
        printf "Skipping \"\e[36m$file\e[0m\"\n"
      fi
    fi
  done
else
  abort "You have to have code-cleaner installed and the code-cleaner script has to be in your \$PATH ($PATH)"
fi
